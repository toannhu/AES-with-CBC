/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package aes;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager.LookAndFeelInfo;

/**
 *
 * @author anony
 */
public class AES extends javax.swing.JFrame {

    /**
     * Creates new form AES
     */
    public AES() {
        initComponents();
    }

    String extension = "";
    String filename = "";
    String textPane1 = "";
    String textPane2 = "";
    Path path = null;
    byte[] encrypted;
    byte[] decrypted;
    boolean doneEncrypt = false;
    boolean doneDecrypt = false;
    byte[] clean = null;
    long time = 0;
    
   

    public static byte[] encrypt(byte[] clean, String key) throws Exception {
        byte ivSize = 16;
        byte[] iv = new byte[ivSize];
        SecureRandom random = new SecureRandom();
        random.nextBytes(iv);
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
        MessageDigest digest = MessageDigest.getInstance("SHA-256");
        digest.update(key.getBytes("UTF-8"));
        byte[] keyBytes = new byte[16];
        System.arraycopy(digest.digest(), 0, keyBytes, 0, keyBytes.length);
        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipher.init(1, secretKeySpec, ivParameterSpec);
        byte[] encrypted = cipher.doFinal(clean);
        byte[] encryptedIVAndText = new byte[ivSize + encrypted.length];
        System.arraycopy(iv, 0, encryptedIVAndText, 0, ivSize);
        System.arraycopy(encrypted, 0, encryptedIVAndText, ivSize, encrypted.length);
        return encryptedIVAndText;
    }

    public static byte[] decrypt(byte[] encryptedIvTextBytes, String key) throws Exception {
        byte ivSize = 16;
        byte keySize = 16;
        byte[] iv = new byte[ivSize];
        System.arraycopy(encryptedIvTextBytes, 0, iv, 0, iv.length);
        IvParameterSpec ivParameterSpec = new IvParameterSpec(iv);
        int encryptedSize = encryptedIvTextBytes.length - ivSize;
        byte[] encryptedBytes = new byte[encryptedSize];
        System.arraycopy(encryptedIvTextBytes, ivSize, encryptedBytes, 0, encryptedSize);
        byte[] keyBytes = new byte[keySize];
        MessageDigest md = MessageDigest.getInstance("SHA-256");
        md.update(key.getBytes());
        System.arraycopy(md.digest(), 0, keyBytes, 0, keyBytes.length);
        SecretKeySpec secretKeySpec = new SecretKeySpec(keyBytes, "AES");
        Cipher cipherDecrypt = Cipher.getInstance("AES/CBC/PKCS5Padding");
        cipherDecrypt.init(2, secretKeySpec, ivParameterSpec);
        byte[] decrypted = cipherDecrypt.doFinal(encryptedBytes);
        return decrypted;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        BrowseTab1 = new javax.swing.JButton();
        Encrypt = new javax.swing.JButton();
        SaveAsEncrypt = new javax.swing.JButton();
        key = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        SaveEncrypt = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        BrowseTab2 = new javax.swing.JButton();
        Decrypt = new javax.swing.JButton();
        SaveAsDecrypt = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        SaveDecrypt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane2.setViewportView(jTextPane1);

        BrowseTab1.setText("Browse");
        BrowseTab1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseTab1ActionPerformed(evt);
            }
        });

        Encrypt.setText("Encrypt");
        Encrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptActionPerformed(evt);
            }
        });

        SaveAsEncrypt.setText("Save As");
        SaveAsEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsEncryptActionPerformed(evt);
            }
        });

        key.setText("Key");

        SaveEncrypt.setText("Save");
        SaveEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveEncryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(key)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SaveEncrypt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SaveAsEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Encrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseTab1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(key)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BrowseTab1))
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Encrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveEncrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveAsEncrypt))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38))
        );

        jTabbedPane1.addTab("Encrypt", jPanel1);

        BrowseTab2.setText("Browse");
        BrowseTab2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrowseTab2ActionPerformed(evt);
            }
        });

        Decrypt.setText("Decrypt");
        Decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptActionPerformed(evt);
            }
        });

        SaveAsDecrypt.setText("Save As");
        SaveAsDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsDecryptActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jTextPane2);

        jLabel4.setText("Key ");

        SaveDecrypt.setText("Save");
        SaveDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveDecryptActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(BrowseTab2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Decrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(SaveAsDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                    .addComponent(SaveDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BrowseTab2)
                    .addComponent(jLabel4)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Decrypt)
                        .addGap(8, 8, 8)
                        .addComponent(SaveDecrypt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveAsDecrypt))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Decrypt", jPanel2);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("AES with CBC");

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 13)); // NOI18N
        jLabel2.setText("Made by Nhu Dinh Toan (1414060)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(215, 215, 215)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BrowseTab1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseTab1ActionPerformed
        // TODO add your handling code here:
        this.jFileChooser1.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int result = this.jFileChooser1.showOpenDialog(this);
        JFileChooser var10001 = this.jFileChooser1;
        if(result == 0) {
            File selectedFile = this.jFileChooser1.getSelectedFile();
            int i = selectedFile.getName().lastIndexOf(46);
            this.filename = selectedFile.getName().substring(0, i);
            if(i >= 0) {
                this.extension = selectedFile.getName().substring(i + 1);
            }

            JOptionPane.showMessageDialog((Component)null, "Selected file: " + selectedFile.getAbsolutePath());
            this.path = Paths.get(selectedFile.getAbsolutePath(), new String[0]);
            this.textPane1 = this.textPane1 + "Load file Done!\nPlease click Encrypt Button!\n";
            this.jTextPane1.setText(this.textPane1);
        }
    }//GEN-LAST:event_BrowseTab1ActionPerformed

    private void EncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptActionPerformed
        // TODO add your handling code here:
        this.time = 0L;
        long startTime = System.currentTimeMillis();
        String key = this.jTextField1.getText();

        try {
            if(this.jTextField1.getText() != null) {
                this.clean = Files.readAllBytes(this.path);
                this.encrypted = encrypt(this.clean, key);
                JOptionPane.showMessageDialog((Component)null, "Encrypting Done. Please Save File!");
                this.textPane1 = this.textPane1 + "Encrypting Done. Please Save File!\n";
                this.doneEncrypt = true;
                this.jTextPane1.setText(this.textPane1);
            } else {
                JOptionPane.showMessageDialog((Component)null, "Please input key and browse file before encrypting");
                this.textPane1 = this.textPane1 + "Please input key and browse file before encrypting\n";
                this.jTextPane1.setText(this.textPane1);
            }
        } catch (Exception var7) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, (String)null, var7);
        }

        long endTime = System.currentTimeMillis();
        this.time = endTime - startTime;
        JOptionPane.showMessageDialog((Component)null, "Time to encrypting file: " + this.time + " milliseconds");
        this.textPane1 = this.textPane1 + "Time to encrypting file: " + this.time + " milliseconds\n";
        this.jTextPane1.setText(this.textPane1);
    }//GEN-LAST:event_EncryptActionPerformed

    private void SaveAsEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsEncryptActionPerformed
        // TODO add your handling code here:
        this.jFileChooser1.setCurrentDirectory(new File("user.dir"));
        int retrival = this.jFileChooser1.showSaveDialog((Component)null);
        if(this.doneEncrypt) {
            JFileChooser var10001 = this.jFileChooser1;
            if(retrival == 0) {
                try {
                    FileOutputStream ex = new FileOutputStream(this.jFileChooser1.getSelectedFile() + "." + this.extension);
                    ex.write(this.encrypted);
                    ex.close();
                    JOptionPane.showMessageDialog((Component)null, "Save file: " + this.jFileChooser1.getSelectedFile().getAbsolutePath() + "." + this.extension);
                    this.textPane1 = this.textPane1 + "Save file: " + this.jFileChooser1.getSelectedFile().getAbsolutePath() + "." + this.extension + "\n";
                    this.jTextPane1.setText(this.textPane1);
                } catch (Exception var4) {
                    Logger.getLogger(AES.class.getName()).log(Level.SEVERE, (String)null, var4);
                }
            }
        } else {
            JOptionPane.showMessageDialog((Component)null, "You haven\'t encrypted any files");
        }
    }//GEN-LAST:event_SaveAsEncryptActionPerformed

    private void SaveEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveEncryptActionPerformed
        // TODO add your handling code here:
         if(this.doneEncrypt) {
            try {
                FileOutputStream ex = new FileOutputStream(System.getProperty("user.dir") + "\\test\\" + this.filename + "_encrypted." + this.extension);
                ex.write(this.encrypted);
                ex.close();
                JOptionPane.showMessageDialog((Component)null, "Save file: " + System.getProperty("user.dir") + "\\test\\" + this.filename + "_encrypted." + this.extension);
                this.textPane1 = this.textPane1 + "Save file: " + System.getProperty("user.dir") + "\\test\\" + this.filename + "_encrypted." + this.extension + "\n";
                this.jTextPane1.setText(this.textPane1);
            } catch (IOException var3) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, (String)null, var3);
            }
        }
    }//GEN-LAST:event_SaveEncryptActionPerformed

    private void BrowseTab2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrowseTab2ActionPerformed
        // TODO add your handling code here:
        this.jFileChooser1.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int result = this.jFileChooser1.showOpenDialog(this);
        JFileChooser var10001 = this.jFileChooser1;
        if(result == 0) {
            File selectedFile = this.jFileChooser1.getSelectedFile();
            int i = selectedFile.getName().lastIndexOf(46);
            this.filename = selectedFile.getName().substring(0, i);
            if(i >= 0) {
                this.extension = selectedFile.getName().substring(i + 1);
            }

            JOptionPane.showMessageDialog((Component)null, "Selected file: " + selectedFile.getAbsolutePath());
            this.path = Paths.get(selectedFile.getAbsolutePath(), new String[0]);
            this.textPane2 = this.textPane2 + "Load file Done!\nPlease click Decrypt Button!\n";
            this.jTextPane2.setText(this.textPane2);
        }
    }//GEN-LAST:event_BrowseTab2ActionPerformed

    private void DecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptActionPerformed
        // TODO add your handling code here:
        String key = this.jTextField2.getText();
        this.time = 0L;
        long startTime = System.currentTimeMillis();

        try {
            if(this.jTextField2.getText() != null) {
                this.encrypted = Files.readAllBytes(this.path);
                this.decrypted = decrypt(this.encrypted, key);
                JOptionPane.showMessageDialog((Component)null, "Decrypting Done. Please Save File!");
                this.textPane2 = this.textPane2 + "Decrypting Done. Please Save File!\n";
                this.doneDecrypt = true;
            } else {
                JOptionPane.showMessageDialog((Component)null, "Please input key and browse text file before decrypting");
                this.textPane2 = this.textPane2 + "Please input key and browse file before decrypting\n";
            }

            this.jTextPane2.setText(this.textPane2);
        } catch (Exception var7) {
            Logger.getLogger(AES.class.getName()).log(Level.SEVERE, (String)null, var7);
        }

        long endTime = System.currentTimeMillis();
        this.time = endTime - startTime;
        JOptionPane.showMessageDialog((Component)null, "Time to decrypting file: " + this.time + " milliseconds");
        this.textPane2 = this.textPane2 + "Time to decrypting file: " + this.time + " milliseconds\n";
        this.jTextPane2.setText(this.textPane1);
    }//GEN-LAST:event_DecryptActionPerformed

    private void SaveAsDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsDecryptActionPerformed
        // TODO add your handling code here:
        this.jFileChooser1.setCurrentDirectory(new File("user.dir"));
        int retrival = this.jFileChooser1.showSaveDialog((Component)null);
        if(this.doneDecrypt) {
            JFileChooser var10001 = this.jFileChooser1;
            if(retrival == 0) {
                try {
                    FileOutputStream ex = new FileOutputStream(this.jFileChooser1.getSelectedFile() + "." + this.extension);
                    ex.write(this.decrypted);
                    ex.close();
                    JOptionPane.showMessageDialog((Component)null, "Save file: " + this.jFileChooser1.getSelectedFile().getAbsolutePath() + "." + this.extension);
                    this.textPane2 = this.textPane2 + "Save file: " + this.jFileChooser1.getSelectedFile().getAbsolutePath() + "." + this.extension + "\n";
                    this.jTextPane2.setText(this.textPane2);
                } catch (IOException var4) {
                    Logger.getLogger(AES.class.getName()).log(Level.SEVERE, (String)null, var4);
                }
            }
        } else {
            JOptionPane.showMessageDialog((Component)null, "You haven\'t decrypted any files");
        }
    }//GEN-LAST:event_SaveAsDecryptActionPerformed

    private void SaveDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveDecryptActionPerformed
        // TODO add your handling code here:
        if(this.doneDecrypt) {
            try {
                FileOutputStream ex = new FileOutputStream(System.getProperty("user.dir") + "\\test\\" + this.filename + "_decrypted." + this.extension);
                ex.write(this.decrypted);
                ex.close();
                JOptionPane.showMessageDialog((Component)null, "Save file: " + System.getProperty("user.dir") + "\\test\\" + this.filename + "_decrypted." + this.extension);
                this.textPane2 = this.textPane2 + "Save file: " + System.getProperty("user.dir") + "\\test\\" + this.filename + "_decrypted." + this.extension + "\n";
                this.jTextPane2.setText(this.textPane2);
            } catch (IOException var3) {
                Logger.getLogger(AES.class.getName()).log(Level.SEVERE, (String)null, var3);
            }
        }
    }//GEN-LAST:event_SaveDecryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AES().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BrowseTab1;
    private javax.swing.JButton BrowseTab2;
    private javax.swing.JButton Decrypt;
    private javax.swing.JButton Encrypt;
    private javax.swing.JButton SaveAsDecrypt;
    private javax.swing.JButton SaveAsEncrypt;
    private javax.swing.JButton SaveDecrypt;
    private javax.swing.JButton SaveEncrypt;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    private javax.swing.JLabel key;
    // End of variables declaration//GEN-END:variables
}
